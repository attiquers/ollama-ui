server {
    listen 80; # Nginx listens for web requests on port 80 inside the container.
    server_name localhost; # A common default. Can be your domain name later if deployed.

    # Specifies the root directory for your React app's static files inside the container.
    root /usr/share/nginx/html;
    index index.html index.htm; # Default files to serve when a directory is requested.

    # This block handles requests for your React app's static files and enables React Router.
    # It tries to find a matching file ($uri), then a directory ($uri/),
    # and if neither is found, it serves 'index.html'. This is essential for single-page applications (SPAs)
    # like React apps to handle client-side routing correctly.
    location / {
        try_files $uri $uri/ /index.html;
    }

    # This is a crucial block that acts as a reverse proxy for your backend API.
    # Any request coming to the frontend container that starts with '/api/'
    # will be intercepted and forwarded to your backend service.
    location /api/ {
        # 'backend' is the *service name* of your Node.js backend container as defined in docker-compose.yml.
        # '5000' is the port your Node.js backend listens on (as configured in index.js).
        # Nginx handles the internal routing within the Docker network, so your browser thinks
        # it's talking to the same server, avoiding CORS issues.
        proxy_pass http://backend:5000/;
        proxy_http_version 1.1; # Required for WebSocket communication (if your app uses it)
        proxy_set_header Upgrade $http_upgrade; # Required for WebSocket
        proxy_set_header Connection 'upgrade'; # Required for WebSocket
        proxy_set_header Host $host; # Passes the original Host header to the backend
        proxy_cache_bypass $http_upgrade; # Prevents caching issues with upgrade headers
    }
}